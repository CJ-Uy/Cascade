// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

// For visualization, copy-Paste the output file to: https://dbdiagram.io/d 
generator dbml {
  provider            = "prisma-dbml-generator"
  outputName          = "schema.dbml"
  projectName         = "Akiva Cascade"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "Digital Mass Document Approval and Review System"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String
  lastName  String

  name          String // actually username but haven't figured out how to change better-auth
  email         String         @unique
  emailVerified Boolean
  image         String?
  businessUnit  BusinessUnit[]
  requisitions  Requisition[]

  role        Role[] // People should only have 1 role but for flexibility we allow many just in case
  headsRole   HeadsRole? @relation(fields: [headsRoleId], references: [id])
  headsRoleId String?

  sessions Session[]
  accounts Account[]

  active Boolean @default(true) // Set to false if the account should be closed/locked

  @@map("users") // Makes the native table name in the database "users" for better-auth
}

model BusinessUnit {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  head        HeadsRole? @relation(fields: [headsRoleId], references: [id])
  headsRoleId String?
  roles       Role[]
  users       User[]

  requisitions         Requisition[]
  requisitionTemplates Json
  approvalSystem       Json
}

// Roles can be created by BU-Heads
model Role {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  businessUnit   BusinessUnit? @relation(fields: [businessUnitId], references: [id])
  businessUnitId String?
  users          User[]
}

// HeadRoles needs to be isolated from the Role
model HeadsRole {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  users        User[]
  businessUnit BusinessUnit[]

  isAkivaApprover Boolean
}

model Requisition {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  initiator      User         @relation(fields: [userId], references: [id])
  userId         String
  fromBU         BusinessUnit @relation(fields: [businessUnitId], references: [id])
  businessUnitId String

  stage     Int    @default(0) // This is the index of the array in approvals[] 
  approvals Json[]
  values    Json
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id        String    @id @default(uuid())
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}
